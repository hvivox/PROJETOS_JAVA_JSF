#################
### Platforms ###
#################

## MySQL
#hibernate.dialect org.hibernate.dialect.MySQLDialect
#hibernate.dialect org.hibernate.dialect.MySQLInnoDBDialect
#hibernate.dialect org.hibernate.dialect.MySQLMyISAMDialect
#hibernate.connection.driver_class com.mysql.jdbc.Driver
#hibernate.connection.url jdbc:mysql://localhost/teste
hibernate.dialect org.hibernate.dialect.MySQL5Dialect
hibernate.connection.driver_class com.mysql.jdbc.Driver
hibernate.connection.url jdbc:mysql\://localhost/portal
hibernate.connection.username root
hibernate.connection.password sescdr@123
#pm#@157

#true or false. Setting which indicates whether or not the new IdentifierGenerator implementations are used for AUTO, TABLE
#and SEQUENCE. Default to false to keep backward compatibility. Faz com que cada um das classes tenham seus próprios contadores, caso contrario o sitema seguirá uma seguencia unica
hibernate.id.new_generator_mappings true
## utilizado para trabalhar com o padrão open-session-in-view
#As sessões correntes são rastreadas por uma thread de execução. Vincula a sessao correnta a uma thread
hibernate.current_session_context_class thread


#################################
### Plugin ConnectionProvider ###
#################################
## use a custom ConnectionProvider (if not set, Hibernate will choose a built-in ConnectionProvider using hueristics)
#proverá conexões JDBC para o Hibernate, 
#UTILIZAR APENAS SE FOR UTILIZAR A POOL INTERNO DO HIBERNATE
#hibernate.connection.provider_class org.hibernate.engine.jdbc.connections.spi.ConnectionProvider


###########################
### C3P0 Connection Pool###
###########################
#PROVER O POOL DE CONEXÃO. DELIMITA UTILIZACAO DO POOL DE CONEXÃO

#<!-- Número de conexões adicionais que serão criadas a cada requisição de conexão-->
hibernate.c3p0.acquire_increment 1

#tempo em segundos para que uma conexao seja validada. 
hibernate.c3p0.idle_test_period 3000


#<!-- Segundos que uma Conexão será mantida no pool sem ser usada, antes de ser descartada. Este deve ser sempre maior que o test_perid
#Zero significa que a conexão nunca expira-->
#Tempo para que uma conexao inativa seja removida do pool. (em segundos)
hibernate.c3p0.timeout 3600



#numero padrao de conexão. estarao preparadas a todo o tempo
#Numero de conexões que são criadas ao inicialiar a aplicação
hibernate.c3p0.min_size 2

#maximo de conexao. uma exeção será lançada caso o numero se esgote.
hibernate.c3p0.max_size 20

#Quantidade de procidures que irão para o cache
hibernate.c3p0.max_statements 20


#defines a limit (in seconds) to how long a Connection may remain checked out. If set to a nozero value, unreturned,
# checked-out Connections that exceed this limit will be summarily destroyed, and then replaced in the pool. 
#Obviously, you must take care to set this parameter to a value large enough that all intended operations on checked 
# out Connections have time to complete. You can use this parameter to merely workaround unreliable client apps that 
#fail to close() Connections. ERRO: A PooledConnection that has already signalled a Connection error is still in use!
#Defini o tempo maximo de funcionamento de uma conexão nunca utilizar  
#hibernate.c3p0.unreturnedConnectionTimeout 5


#Opção obsoleta não utizlizar
#hibernate.c3p0.validate hibernate 2.x only!



######################
### Query Language ###
######################

## define query language constants / function names
hibernate.query.substitutions true 1, false 0, yes 'Y', no 'N'

## select the classic query parser
#hibernate.query.factory_class org.hibernate.hql.classic.ClassicQueryTranslatorFactory
hibernate.format_sql true



##############################
### Proxool Connection Pool###
##############################
## Properties for external configuration of Proxool
hibernate.proxool.pool_alias pool1

## Only need one of the following
#hibernate.proxool.existing_pool true
#hibernate.proxool.xml proxool.xml
#hibernate.proxool.properties proxool.properties



##############################
### Miscellaneous Settings ###
##############################
## print all generated SQL to the console
#hibernate.show_sql true


## add comments to the generated SQL
#hibernate.use_sql_comments true


## generate statistics (OPCIONAL - Se habilitado, o Hibernate coletará estatísticas úteis para o ajuste do desempenho)
hibernate.generate_statistics false


## specify a default schema and catalog for unqualified tablenames
#hibernate.default_schema test
#hibernate.default_catalog test


## enable ordering of SQL UPDATEs by primary key. Força o Hibernate a ordenar os updates SQL pelo valor
# da chave primária dos itens que estão sendo atualizados. Isso resultará em menos deadlocks nas transações 
# em sistemas altamente concorrente
hibernate.order_updates false


## In eager fetching, only join three tables deep if joins are used 2
hibernate.max_fetch_depth 2


## set the default batch size for batch fetching (Determina um tamanho padrão para busca de associação em lotes do hibernate: valores recomndados 4, 8, 16)
hibernate.default_batch_fetch_size 8


## rollback generated identifier values of deleted entities to default values
#hibernate.use_identifer_rollback true


## enable CGLIB reflection optimizer (enabled by default)
#hibernate.cglib.use_reflection_optimizer false



#####################
### JDBC Settings ###
#####################
## enable batch updates even for versioned data
hibernate.jdbc.batch_versioned_data true

## use streams when writing binary types to / from JDBC
hibernate.jdbc.use_streams_for_binary true

## choose a custom SQL exception converter
#hibernate.jdbc.sql_exception_converter

#As you noticed, this exception isn't a real problem. It happens during the boot, when Hibernate 
#tries to retrieve some meta information from the database. If this annoys you, you can disable it:
#Disabling contextual LOB creation as createClob() method threw erro
hibernate.temp.use_jdbc_metadata_defaults false


##########################
### Second-level Cache ###
##########################
## set a prefix for cache region names
hibernate.cache.region_prefix hibernate.test


## disable the second-level cache
#hibernate.cache.use_second_level_cache false


## enable the query cache
#hibernate.cache.use_query_cache true


## choose a cache implementation
hibernate.cache.provider_class org.hibernate.cache.HashtableCacheProvider



#####################
### JDBC Settings ###
#####################
## specify a JDBC isolation level
#garante o nível de isolamento para evitar erros durante as transações: 
#PROPRIEDADES ACID - ATOMICIDADE, CONSISTENCIA, INTEGRIDADE, DURABILIDADE
# 1. Isolamento read uncommitted; 2. Isolamento read committed; 3. Isolamento repeatable read;  4. Isolamento serializable 
hibernate.connection.isolation 4



####################################
####Categorias de Log do Hibernate##
####################################
#org.hibernate.SQL Registra todas as instruções SQL DML a medida que elas são executadas
#org.hibernate.type Registra todos os parâmetros JDBC
#org.hibernate.tool.hbm2ddl Registra todas as instruções SQL DDL a medida que elas são executadas
#org.hibernate.pretty Registra o estado de todas as entidades (máximo 20 entidades) associadas à sessão no momento da liberação (flush).
#org.hibernate.cache Registra todas as atividades de cachê de segundo nível
#org.hibernate.transaction Registra atividades relacionada à transação
#org.hibernate.jdbc Registra todas as requisições de recursos JDBC
#org.hibernate.hql.ast.AST Registra instruções SQL e HQL durante a análise da consultas
#org.hibernate.secure Registra todas as requisições de autorização JAAS
#org.hibernate Registra tudo. Apesar de ter muita informação, é muito útil para o problema de inicialização.
